# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

interface UserInterface {
    email: String!
    firstName: String
    fullName: String
    lastName: String
    username: String!
}

type AcceptServicePurchase {
    errors: [ErrorType]
    servicePurchase: ServicePurchaseType
}

type AccountType implements UserInterface {
    balance: Int!
    chatSet: [ChatType!]!
    createdAt: DateTime!
    depositSet: [DepositType!]!
    email: String!
    firstName: String
    fullName: String
    id: UUID!
    lastName: String
    litigationSet: [LitigationType!]!
    operationSet: [OperationType!]!
    refundSet: [RefundType!]!
    serviceSet: [ServiceType!]!
    servicecommentSet: [ServiceCommentType!]!
    servicepurchaseSet: [ServicePurchaseType!]!
    updatedAt: DateTime!
    username: String!
}

type AdminType implements UserInterface {
    createdAt: DateTime!
    email: String!
    firstName: String
    fullName: String
    id: UUID!
    lastName: String
    litigationSet: [LitigationType!]!
    updatedAt: DateTime!
    username: String!
}

type ChatType {
    account: AccountType!
    content: String!
    createdAt: DateTime!
    id: UUID!
    servicePurchase: ServicePurchaseType!
    updatedAt: DateTime!
}

type CreateAccount {
    account: AccountType
    errors: [ErrorType]
}

type CreateDeposit {
    deposit: DepositType
    errors: [ErrorType]
}

type CreateRefund {
    errors: [ErrorType]
    refund: RefundType
}

type CreateService {
    errors: [ErrorType]
    service: ServiceType
}

type DeleteAccount {
    errors: [ErrorType]
}

type DeleteService {
    errors: [ErrorType]
}

type DepositType {
    account: AccountType!
    amount: Int!
    createdAt: DateTime!
    id: UUID!
    updatedAt: DateTime!
}

type ErrorType {
    field: String!
    messages: [String!]!
}

type FundType {
    balance: Int!
    createdAt: DateTime!
    id: UUID!
    label: String!
    operationSet: [OperationType!]!
    updatedAt: DateTime!
}

type InitServicePurchase {
    errors: [ErrorType]
    servicePurchase: ServicePurchaseType
}

type LitigationType {
    account: AccountType!
    admin: AdminType!
    createdAt: DateTime!
    description: String!
    handled: Boolean!
    id: UUID!
    servicePurchase: ServicePurchaseType!
    title: String!
    updatedAt: DateTime!
}

type Mutation {
    acceptServicePurchase(input: AcceptServicePurchaseInput!): AcceptServicePurchase
    createAccount(input: AccountInput!): CreateAccount
    createDeposit(input: CreateDepositInput!): CreateDeposit
    createRefund(input: CreateRefundInput!): CreateRefund
    createService(input: CreateServiceInput!): CreateService
    deleteAccount(id: UUID!): DeleteAccount
    deleteService(id: UUID!): DeleteService
    initServicePurchase(input: InitServicePurchaseInput!): InitServicePurchase
    updateAccount(input: AccountInput!): UpdateAccount
    updateService(input: UpdateServiceInput!): UpdateService
}

type OperationType {
    account: AccountType
    amount: Int!
    createdAt: DateTime!
    description: String
    fund: FundType!
    id: UUID!
    servicePurchase: ServicePurchaseType
    type: String!
    updatedAt: DateTime!
}

type Query {
    "ServiceCategory list"
    serviceCategories(id: UUID): [ServiceCategoryType]
    "Service list"
    services(id: UUID): [ServiceType]
}

type RefundType {
    account: AccountType!
    amount: Int!
    createdAt: DateTime!
    id: UUID!
    updatedAt: DateTime!
}

type ServiceCategoryType {
    createdAt: DateTime!
    description: String
    id: UUID!
    label: String!
    serviceSet: [ServiceType!]!
    updatedAt: DateTime!
}

type ServiceCommentType {
    account: AccountType!
    createdAt: DateTime!
    id: UUID!
    service: ServiceType!
    updatedAt: DateTime!
}

type ServiceMediaType {
    createdAt: DateTime!
    file: String
    id: UUID!
    service: ServiceType!
    updatedAt: DateTime!
    url: String
}

type ServiceOptionType {
    createdAt: DateTime!
    delay: Int!
    description: String
    id: UUID!
    label: String!
    price: Int!
    service: ServiceType!
    servicepurchaseSet: [ServicePurchaseType!]!
    servicepurchaseserviceoptionSet: [ServicePurchaseServiceOptionType!]!
    updatedAt: DateTime!
}

type ServicePurchaseServiceOptionType {
    createdAt: DateTime!
    id: UUID!
    serviceOption: ServiceOptionType!
    servicePurchase: ServicePurchaseType!
    updatedAt: DateTime!
}

type ServicePurchaseType {
    accepted: Boolean!
    account: AccountType!
    approved: Boolean!
    canceled: Boolean!
    chatSet: [ChatType!]!
    commission: Int!
    createdAt: DateTime!
    delay: Int!
    delivered: Boolean!
    id: UUID!
    litigation: LitigationType
    operationSet: [OperationType!]!
    price: Int!
    service: ServiceType!
    serviceOptions: [ServiceOptionType!]!
    servicepurchaseserviceoptionSet: [ServicePurchaseServiceOptionType!]!
    updatedAt: DateTime!
}

type ServiceType {
    account: AccountType!
    activated: Boolean!
    content: String!
    createdAt: DateTime!
    delay: Int!
    id: UUID!
    keywords: String
    published: Boolean!
    serviceCategory: ServiceCategoryType!
    servicecommentSet: [ServiceCommentType!]!
    servicemediaSet: [ServiceMediaType!]!
    serviceoptionSet: [ServiceOptionType!]!
    servicepurchaseSet: [ServicePurchaseType!]!
    stars: Int!
    title: String!
    updatedAt: DateTime!
}

type UpdateAccount {
    account: AccountType
    errors: [ErrorType]
}

type UpdateService {
    errors: [ErrorType]
    service: ServiceType
}

input AcceptServicePurchaseInput {
    id: UUID!
}

input AccountInput {
    email: String!
    firstName: String
    lastName: String
    password: String!
    passwordConfirmation: String!
    username: String!
}

input CreateDepositInput {
    account: ID!
    amount: Int!
}

input CreateRefundInput {
    account: ID!
    amount: Int!
}

input CreateServiceInput {
    account: ID!
    content: String!
    delay: Int!
    keywords: String
    published: Boolean
    serviceCategory: ID!
    serviceOptions: [ServiceOptionInput]
    title: String!
}

input InitServicePurchaseInput {
    account: ID!
    service: ID!
    serviceOptions: [ID]
}

input ServiceOptionInput {
    delay: Int!
    description: String
    label: String!
    price: Int!
}

input UpdateServiceInput {
    content: String
    delay: Int
    id: UUID!
    keywords: String
    published: Boolean
    serviceCategory: ID
    stars: Int
    title: String
}


"""
Leverages the internal Python implmeentation of UUID (uuid.UUID) to provide native UUID objects
in fields, resolvers and input.
"""
scalar UUID

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime